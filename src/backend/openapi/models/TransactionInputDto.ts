/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionBalanceInputDto } from './TransactionBalanceInputDto';
import {
    TransactionBalanceInputDtoFromJSON,
    TransactionBalanceInputDtoFromJSONTyped,
    TransactionBalanceInputDtoToJSON,
    TransactionBalanceInputDtoToJSONTyped,
} from './TransactionBalanceInputDto';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
    TagToJSONTyped,
} from './Tag';

/**
 * 
 * @export
 * @interface TransactionInputDto
 */
export interface TransactionInputDto {
    /**
     * 
     * @type {string}
     * @memberof TransactionInputDto
     */
    transactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionInputDto
     */
    groupId: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionInputDto
     */
    name: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionInputDto
     */
    icon: string | null;
    /**
     * 
     * @type {Date}
     * @memberof TransactionInputDto
     */
    createTime: Date;
    /**
     * 
     * @type {Date}
     * @memberof TransactionInputDto
     */
    transactionTime: Date;
    /**
     * 
     * @type {number}
     * @memberof TransactionInputDto
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionInputDto
     */
    currency: string | null;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof TransactionInputDto
     */
    tags: Array<Tag> | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionInputDto
     */
    geoCoordinate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionInputDto
     */
    photo?: string | null;
    /**
     * 
     * @type {Array<TransactionBalanceInputDto>}
     * @memberof TransactionInputDto
     */
    balances?: Array<TransactionBalanceInputDto> | null;
}

/**
 * Check if a given object implements the TransactionInputDto interface.
 */
export function instanceOfTransactionInputDto(value: object): value is TransactionInputDto {
    if (!('groupId' in value) || value['groupId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('createTime' in value) || value['createTime'] === undefined) return false;
    if (!('transactionTime' in value) || value['transactionTime'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    return true;
}

export function TransactionInputDtoFromJSON(json: any): TransactionInputDto {
    return TransactionInputDtoFromJSONTyped(json, false);
}

export function TransactionInputDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionInputDto {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionId': json['transactionId'] == null ? undefined : json['transactionId'],
        'groupId': json['groupId'],
        'name': json['name'],
        'icon': json['icon'],
        'createTime': (new Date(json['createTime'])),
        'transactionTime': (new Date(json['transactionTime'])),
        'amount': json['amount'],
        'currency': json['currency'],
        'tags': (json['tags'] == null ? null : (json['tags'] as Array<any>).map(TagFromJSON)),
        'geoCoordinate': json['geoCoordinate'] == null ? undefined : json['geoCoordinate'],
        'photo': json['photo'] == null ? undefined : json['photo'],
        'balances': json['balances'] == null ? undefined : ((json['balances'] as Array<any>).map(TransactionBalanceInputDtoFromJSON)),
    };
}

export function TransactionInputDtoToJSON(json: any): TransactionInputDto {
    return TransactionInputDtoToJSONTyped(json, false);
}

export function TransactionInputDtoToJSONTyped(value?: TransactionInputDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transactionId': value['transactionId'],
        'groupId': value['groupId'],
        'name': value['name'],
        'icon': value['icon'],
        'createTime': ((value['createTime']).toISOString()),
        'transactionTime': ((value['transactionTime']).toISOString()),
        'amount': value['amount'],
        'currency': value['currency'],
        'tags': (value['tags'] == null ? null : (value['tags'] as Array<any>).map(TagToJSON)),
        'geoCoordinate': value['geoCoordinate'],
        'photo': value['photo'],
        'balances': value['balances'] == null ? undefined : ((value['balances'] as Array<any>).map(TransactionBalanceInputDtoToJSON)),
    };
}

