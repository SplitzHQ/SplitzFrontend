/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupBalance } from './GroupBalance';
import {
    GroupBalanceFromJSON,
    GroupBalanceFromJSONTyped,
    GroupBalanceToJSON,
    GroupBalanceToJSONTyped,
} from './GroupBalance';
import type { SplitzUser } from './SplitzUser';
import {
    SplitzUserFromJSON,
    SplitzUserFromJSONTyped,
    SplitzUserToJSON,
    SplitzUserToJSONTyped,
} from './SplitzUser';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
    TransactionToJSONTyped,
} from './Transaction';

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    groupId?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    photo?: string | null;
    /**
     * 
     * @type {Array<SplitzUser>}
     * @memberof Group
     */
    members?: Array<SplitzUser>;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    membersIdHash: string;
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof Group
     */
    transactions?: Array<Transaction>;
    /**
     * 
     * @type {Array<GroupBalance>}
     * @memberof Group
     */
    balances?: Array<GroupBalance>;
    /**
     * The number of transactions of the group.
     * This number is only for searching purposes and may not be accurate if transactions are deleted or modified.
     * @type {number}
     * @memberof Group
     */
    transactionCount: number;
    /**
     * The date of the last transaction of the group.
     * This is only for searching purposes and may not be accurate if transactions are deleted or modified.
     * @type {Date}
     * @memberof Group
     */
    lastActivityTime: Date;
}

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): value is Group {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('membersIdHash' in value) || value['membersIdHash'] === undefined) return false;
    if (!('transactionCount' in value) || value['transactionCount'] === undefined) return false;
    if (!('lastActivityTime' in value) || value['lastActivityTime'] === undefined) return false;
    return true;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if (json == null) {
        return json;
    }
    return {
        
        'groupId': json['groupId'] == null ? undefined : json['groupId'],
        'name': json['name'],
        'photo': json['photo'] == null ? undefined : json['photo'],
        'members': json['members'] == null ? undefined : ((json['members'] as Array<any>).map(SplitzUserFromJSON)),
        'membersIdHash': json['membersIdHash'],
        'transactions': json['transactions'] == null ? undefined : ((json['transactions'] as Array<any>).map(TransactionFromJSON)),
        'balances': json['balances'] == null ? undefined : ((json['balances'] as Array<any>).map(GroupBalanceFromJSON)),
        'transactionCount': json['transactionCount'],
        'lastActivityTime': (new Date(json['lastActivityTime'])),
    };
}

export function GroupToJSON(json: any): Group {
    return GroupToJSONTyped(json, false);
}

export function GroupToJSONTyped(value?: Group | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'groupId': value['groupId'],
        'name': value['name'],
        'photo': value['photo'],
        'members': value['members'] == null ? undefined : ((value['members'] as Array<any>).map(SplitzUserToJSON)),
        'membersIdHash': value['membersIdHash'],
        'transactions': value['transactions'] == null ? undefined : ((value['transactions'] as Array<any>).map(TransactionToJSON)),
        'balances': value['balances'] == null ? undefined : ((value['balances'] as Array<any>).map(GroupBalanceToJSON)),
        'transactionCount': value['transactionCount'],
        'lastActivityTime': ((value['lastActivityTime']).toISOString()),
    };
}

