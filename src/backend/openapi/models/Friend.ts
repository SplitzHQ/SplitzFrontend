/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SplitzUser } from './SplitzUser';
import {
    SplitzUserFromJSON,
    SplitzUserFromJSONTyped,
    SplitzUserToJSON,
    SplitzUserToJSONTyped,
} from './SplitzUser';

/**
 * 
 * @export
 * @interface Friend
 */
export interface Friend {
    /**
     * 
     * @type {string}
     * @memberof Friend
     */
    userId: string | null;
    /**
     * 
     * @type {SplitzUser}
     * @memberof Friend
     */
    user?: SplitzUser;
    /**
     * 
     * @type {string}
     * @memberof Friend
     */
    friendUserId: string | null;
    /**
     * 
     * @type {SplitzUser}
     * @memberof Friend
     */
    friendUser?: SplitzUser;
    /**
     * 
     * @type {string}
     * @memberof Friend
     */
    remark?: string | null;
}

/**
 * Check if a given object implements the Friend interface.
 */
export function instanceOfFriend(value: object): value is Friend {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('friendUserId' in value) || value['friendUserId'] === undefined) return false;
    return true;
}

export function FriendFromJSON(json: any): Friend {
    return FriendFromJSONTyped(json, false);
}

export function FriendFromJSONTyped(json: any, ignoreDiscriminator: boolean): Friend {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'user': json['user'] == null ? undefined : SplitzUserFromJSON(json['user']),
        'friendUserId': json['friendUserId'],
        'friendUser': json['friendUser'] == null ? undefined : SplitzUserFromJSON(json['friendUser']),
        'remark': json['remark'] == null ? undefined : json['remark'],
    };
}

export function FriendToJSON(json: any): Friend {
    return FriendToJSONTyped(json, false);
}

export function FriendToJSONTyped(value?: Friend | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'user': SplitzUserToJSON(value['user']),
        'friendUserId': value['friendUserId'],
        'friendUser': SplitzUserToJSON(value['friendUser']),
        'remark': value['remark'],
    };
}

