/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { mapValues } from '../runtime'
import type { Group } from './Group'
import { GroupFromJSON, GroupFromJSONTyped, GroupToJSON, GroupToJSONTyped } from './Group'
import type { SplitzUser } from './SplitzUser'
import { SplitzUserFromJSON, SplitzUserFromJSONTyped, SplitzUserToJSON, SplitzUserToJSONTyped } from './SplitzUser'

/**
 *
 * @export
 * @interface GroupBalance
 */
export interface GroupBalance {
  /**
   *
   * @type {string}
   * @memberof GroupBalance
   */
  groupId: string
  /**
   *
   * @type {Group}
   * @memberof GroupBalance
   */
  group?: Group
  /**
   *
   * @type {string}
   * @memberof GroupBalance
   */
  userId: string
  /**
   *
   * @type {SplitzUser}
   * @memberof GroupBalance
   */
  user?: SplitzUser
  /**
   *
   * @type {string}
   * @memberof GroupBalance
   */
  friendUserId: string
  /**
   *
   * @type {SplitzUser}
   * @memberof GroupBalance
   */
  friendUser?: SplitzUser
  /**
   *
   * @type {number}
   * @memberof GroupBalance
   */
  balance: number
  /**
   *
   * @type {string}
   * @memberof GroupBalance
   */
  currency: string
}

/**
 * Check if a given object implements the GroupBalance interface.
 */
export function instanceOfGroupBalance(value: object): value is GroupBalance {
  if (!('groupId' in value) || value['groupId'] === undefined) return false
  if (!('userId' in value) || value['userId'] === undefined) return false
  if (!('friendUserId' in value) || value['friendUserId'] === undefined) return false
  if (!('balance' in value) || value['balance'] === undefined) return false
  if (!('currency' in value) || value['currency'] === undefined) return false
  return true
}

export function GroupBalanceFromJSON(json: any): GroupBalance {
  return GroupBalanceFromJSONTyped(json, false)
}

export function GroupBalanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupBalance {
  if (json == null) {
    return json
  }
  return {
    groupId: json['groupId'],
    group: json['group'] == null ? undefined : GroupFromJSON(json['group']),
    userId: json['userId'],
    user: json['user'] == null ? undefined : SplitzUserFromJSON(json['user']),
    friendUserId: json['friendUserId'],
    friendUser: json['friendUser'] == null ? undefined : SplitzUserFromJSON(json['friendUser']),
    balance: json['balance'],
    currency: json['currency']
  }
}

export function GroupBalanceToJSON(json: any): GroupBalance {
  return GroupBalanceToJSONTyped(json, false)
}

export function GroupBalanceToJSONTyped(value?: GroupBalance | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {
    groupId: value['groupId'],
    group: GroupToJSON(value['group']),
    userId: value['userId'],
    user: SplitzUserToJSON(value['user']),
    friendUserId: value['friendUserId'],
    friendUser: SplitzUserToJSON(value['friendUser']),
    balance: value['balance'],
    currency: value['currency']
  }
}
