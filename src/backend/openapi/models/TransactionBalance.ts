/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SplitzUser } from './SplitzUser';
import {
    SplitzUserFromJSON,
    SplitzUserFromJSONTyped,
    SplitzUserToJSON,
    SplitzUserToJSONTyped,
} from './SplitzUser';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
    TransactionToJSONTyped,
} from './Transaction';

/**
 * 
 * @export
 * @interface TransactionBalance
 */
export interface TransactionBalance {
    /**
     * 
     * @type {string}
     * @memberof TransactionBalance
     */
    transactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionBalance
     */
    userId: string | null;
    /**
     * 
     * @type {number}
     * @memberof TransactionBalance
     */
    balance?: number;
    /**
     * 
     * @type {Transaction}
     * @memberof TransactionBalance
     */
    transaction?: Transaction;
    /**
     * 
     * @type {SplitzUser}
     * @memberof TransactionBalance
     */
    user?: SplitzUser;
}

/**
 * Check if a given object implements the TransactionBalance interface.
 */
export function instanceOfTransactionBalance(value: object): value is TransactionBalance {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function TransactionBalanceFromJSON(json: any): TransactionBalance {
    return TransactionBalanceFromJSONTyped(json, false);
}

export function TransactionBalanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionBalance {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionId': json['transactionId'] == null ? undefined : json['transactionId'],
        'userId': json['userId'],
        'balance': json['balance'] == null ? undefined : json['balance'],
        'transaction': json['transaction'] == null ? undefined : TransactionFromJSON(json['transaction']),
        'user': json['user'] == null ? undefined : SplitzUserFromJSON(json['user']),
    };
}

export function TransactionBalanceToJSON(json: any): TransactionBalance {
    return TransactionBalanceToJSONTyped(json, false);
}

export function TransactionBalanceToJSONTyped(value?: TransactionBalance | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transactionId': value['transactionId'],
        'userId': value['userId'],
        'balance': value['balance'],
        'transaction': TransactionToJSON(value['transaction']),
        'user': SplitzUserToJSON(value['user']),
    };
}

