/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    GroupToJSONTyped,
} from './Group';
import type { Friend } from './Friend';
import {
    FriendFromJSON,
    FriendFromJSONTyped,
    FriendToJSON,
    FriendToJSONTyped,
} from './Friend';

/**
 * 
 * @export
 * @interface SplitzUser
 */
export interface SplitzUser {
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    normalizedUserName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    normalizedEmail?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SplitzUser
     */
    emailConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    passwordHash?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    securityStamp?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    concurrencyStamp?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SplitzUser
     */
    phoneNumberConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SplitzUser
     */
    twoFactorEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SplitzUser
     */
    lockoutEnd?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof SplitzUser
     */
    lockoutEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SplitzUser
     */
    accessFailedCount?: number;
    /**
     * 
     * @type {string}
     * @memberof SplitzUser
     */
    photo?: string | null;
    /**
     * 
     * @type {Array<Friend>}
     * @memberof SplitzUser
     */
    friends?: Array<Friend>;
    /**
     * 
     * @type {Array<Group>}
     * @memberof SplitzUser
     */
    groups?: Array<Group>;
}

/**
 * Check if a given object implements the SplitzUser interface.
 */
export function instanceOfSplitzUser(value: object): value is SplitzUser {
    return true;
}

export function SplitzUserFromJSON(json: any): SplitzUser {
    return SplitzUserFromJSONTyped(json, false);
}

export function SplitzUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): SplitzUser {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'userName': json['userName'] == null ? undefined : json['userName'],
        'normalizedUserName': json['normalizedUserName'] == null ? undefined : json['normalizedUserName'],
        'email': json['email'] == null ? undefined : json['email'],
        'normalizedEmail': json['normalizedEmail'] == null ? undefined : json['normalizedEmail'],
        'emailConfirmed': json['emailConfirmed'] == null ? undefined : json['emailConfirmed'],
        'passwordHash': json['passwordHash'] == null ? undefined : json['passwordHash'],
        'securityStamp': json['securityStamp'] == null ? undefined : json['securityStamp'],
        'concurrencyStamp': json['concurrencyStamp'] == null ? undefined : json['concurrencyStamp'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'phoneNumberConfirmed': json['phoneNumberConfirmed'] == null ? undefined : json['phoneNumberConfirmed'],
        'twoFactorEnabled': json['twoFactorEnabled'] == null ? undefined : json['twoFactorEnabled'],
        'lockoutEnd': json['lockoutEnd'] == null ? undefined : (new Date(json['lockoutEnd'])),
        'lockoutEnabled': json['lockoutEnabled'] == null ? undefined : json['lockoutEnabled'],
        'accessFailedCount': json['accessFailedCount'] == null ? undefined : json['accessFailedCount'],
        'photo': json['photo'] == null ? undefined : json['photo'],
        'friends': json['friends'] == null ? undefined : ((json['friends'] as Array<any>).map(FriendFromJSON)),
        'groups': json['groups'] == null ? undefined : ((json['groups'] as Array<any>).map(GroupFromJSON)),
    };
}

export function SplitzUserToJSON(json: any): SplitzUser {
    return SplitzUserToJSONTyped(json, false);
}

export function SplitzUserToJSONTyped(value?: SplitzUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'userName': value['userName'],
        'normalizedUserName': value['normalizedUserName'],
        'email': value['email'],
        'normalizedEmail': value['normalizedEmail'],
        'emailConfirmed': value['emailConfirmed'],
        'passwordHash': value['passwordHash'],
        'securityStamp': value['securityStamp'],
        'concurrencyStamp': value['concurrencyStamp'],
        'phoneNumber': value['phoneNumber'],
        'phoneNumberConfirmed': value['phoneNumberConfirmed'],
        'twoFactorEnabled': value['twoFactorEnabled'],
        'lockoutEnd': value['lockoutEnd'] == null ? undefined : ((value['lockoutEnd'] as any).toISOString()),
        'lockoutEnabled': value['lockoutEnabled'],
        'accessFailedCount': value['accessFailedCount'],
        'photo': value['photo'],
        'friends': value['friends'] == null ? undefined : ((value['friends'] as Array<any>).map(FriendToJSON)),
        'groups': value['groups'] == null ? undefined : ((value['groups'] as Array<any>).map(GroupToJSON)),
    };
}

