/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  TransactionDraftDto,
  TransactionDraftInputDto,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TransactionDraftDtoFromJSON,
    TransactionDraftDtoToJSON,
    TransactionDraftInputDtoFromJSON,
    TransactionDraftInputDtoToJSON,
} from '../models/index';

export interface AddTransactionDraftRequest {
    transactionDraftInputDto?: TransactionDraftInputDto;
}

export interface DeleteTransactionDraftRequest {
    id: string;
}

export interface GetTransactionDraftRequest {
    id: string;
}

export interface UpdateTransactionDraftRequest {
    transactionId: string;
    transactionDraftId?: string;
    transactionDraftInputDto?: TransactionDraftInputDto;
}

/**
 * 
 */
export class TransactionDraftApi extends runtime.BaseAPI {

    /**
     * Add a transaction
     */
    async addTransactionDraftRaw(requestParameters: AddTransactionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDraftDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/transactiondraft`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDraftInputDtoToJSON(requestParameters['transactionDraftInputDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDraftDtoFromJSON(jsonValue));
    }

    /**
     * Add a transaction
     */
    async addTransactionDraft(requestParameters: AddTransactionDraftRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDraftDto> {
        const response = await this.addTransactionDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a transaction
     */
    async deleteTransactionDraftRaw(requestParameters: DeleteTransactionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTransactionDraft().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/transactiondraft/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a transaction
     */
    async deleteTransactionDraft(requestParameters: DeleteTransactionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTransactionDraftRaw(requestParameters, initOverrides);
    }

    /**
     * Get transaction by id
     */
    async getTransactionDraftRaw(requestParameters: GetTransactionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDraftDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTransactionDraft().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/transactiondraft/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDraftDtoFromJSON(jsonValue));
    }

    /**
     * Get transaction by id
     */
    async getTransactionDraft(requestParameters: GetTransactionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDraftDto> {
        const response = await this.getTransactionDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a transaction
     */
    async updateTransactionDraftRaw(requestParameters: UpdateTransactionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling updateTransactionDraft().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transactionDraftId'] != null) {
            queryParameters['transactionDraftId'] = requestParameters['transactionDraftId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/transactiondraft/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDraftInputDtoToJSON(requestParameters['transactionDraftInputDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a transaction
     */
    async updateTransactionDraft(requestParameters: UpdateTransactionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTransactionDraftRaw(requestParameters, initOverrides);
    }

}
