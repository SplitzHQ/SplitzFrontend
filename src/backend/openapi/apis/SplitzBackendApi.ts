/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessTokenResponse,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  InfoRequest,
  InfoResponse,
  LoginRequest,
  RefreshRequest,
  RegisterRequest,
  ResendConfirmationEmailRequest,
  ResetPasswordRequest,
  TwoFactorRequest,
  TwoFactorResponse,
} from '../models/index';
import {
    AccessTokenResponseFromJSON,
    AccessTokenResponseToJSON,
    ForgotPasswordRequestFromJSON,
    ForgotPasswordRequestToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    InfoRequestFromJSON,
    InfoRequestToJSON,
    InfoResponseFromJSON,
    InfoResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    ResendConfirmationEmailRequestFromJSON,
    ResendConfirmationEmailRequestToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    TwoFactorRequestFromJSON,
    TwoFactorRequestToJSON,
    TwoFactorResponseFromJSON,
    TwoFactorResponseToJSON,
} from '../models/index';

export interface AccountForgotPasswordPostRequest {
    forgotPasswordRequest?: ForgotPasswordRequest;
}

export interface AccountLoginPostRequest {
    useCookies?: boolean;
    useSessionCookies?: boolean;
    loginRequest?: LoginRequest;
}

export interface AccountManage2faPostRequest {
    twoFactorRequest?: TwoFactorRequest;
}

export interface AccountManageInfoPostRequest {
    infoRequest?: InfoRequest;
}

export interface AccountRefreshPostRequest {
    refreshRequest?: RefreshRequest;
}

export interface AccountRegisterPostRequest {
    registerRequest?: RegisterRequest;
}

export interface AccountResendConfirmationEmailPostRequest {
    resendConfirmationEmailRequest?: ResendConfirmationEmailRequest;
}

export interface AccountResetPasswordPostRequest {
    resetPasswordRequest?: ResetPasswordRequest;
}

export interface MapIdentityApiAccountConfirmEmailRequest {
    userId?: string;
    code?: string;
    changedEmail?: string;
}

/**
 * 
 */
export class SplitzBackendApi extends runtime.BaseAPI {

    /**
     */
    async accountForgotPasswordPostRaw(requestParameters: AccountForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/forgotPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPasswordRequestToJSON(requestParameters['forgotPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountForgotPasswordPost(requestParameters: AccountForgotPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountForgotPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async accountLoginPostRaw(requestParameters: AccountLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        if (requestParameters['useCookies'] != null) {
            queryParameters['useCookies'] = requestParameters['useCookies'];
        }

        if (requestParameters['useSessionCookies'] != null) {
            queryParameters['useSessionCookies'] = requestParameters['useSessionCookies'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async accountLoginPost(requestParameters: AccountLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.accountLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountManage2faPostRaw(requestParameters: AccountManage2faPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwoFactorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/manage/2fa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwoFactorRequestToJSON(requestParameters['twoFactorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwoFactorResponseFromJSON(jsonValue));
    }

    /**
     */
    async accountManage2faPost(requestParameters: AccountManage2faPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwoFactorResponse> {
        const response = await this.accountManage2faPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountManageInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/manage/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async accountManageInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.accountManageInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async accountManageInfoPostRaw(requestParameters: AccountManageInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/manage/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InfoRequestToJSON(requestParameters['infoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async accountManageInfoPost(requestParameters: AccountManageInfoPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.accountManageInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountRefreshPostRaw(requestParameters: AccountRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async accountRefreshPost(requestParameters: AccountRefreshPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.accountRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountRegisterPostRaw(requestParameters: AccountRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountRegisterPost(requestParameters: AccountRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountRegisterPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async accountResendConfirmationEmailPostRaw(requestParameters: AccountResendConfirmationEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/resendConfirmationEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendConfirmationEmailRequestToJSON(requestParameters['resendConfirmationEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountResendConfirmationEmailPost(requestParameters: AccountResendConfirmationEmailPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountResendConfirmationEmailPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async accountResetPasswordPostRaw(requestParameters: AccountResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/resetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountResetPasswordPost(requestParameters: AccountResetPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountResetPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mapIdentityApiAccountConfirmEmailRaw(requestParameters: MapIdentityApiAccountConfirmEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['changedEmail'] != null) {
            queryParameters['changedEmail'] = requestParameters['changedEmail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/confirmEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mapIdentityApiAccountConfirmEmail(requestParameters: MapIdentityApiAccountConfirmEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mapIdentityApiAccountConfirmEmailRaw(requestParameters, initOverrides);
    }

}
