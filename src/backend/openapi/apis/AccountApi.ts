/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  SplitzUserDto,
  SplitzUserUpdateViewModel,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SplitzUserDtoFromJSON,
    SplitzUserDtoToJSON,
    SplitzUserUpdateViewModelFromJSON,
    SplitzUserUpdateViewModelToJSON,
} from '../models/index';

export interface AddFriendRequest {
    id: string;
    body?: string;
}

export interface RemoveFriendRequest {
    id: string;
}

export interface UpdateFriendRemarkRequest {
    id: string;
    remark?: string;
}

export interface UpdateUserInfoRequest {
    splitzUserUpdateViewModel?: SplitzUserUpdateViewModel;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Add a friend to the current user
     */
    async addFriendRaw(requestParameters: AddFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addFriend().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/friend/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a friend to the current user
     */
    async addFriend(requestParameters: AddFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addFriendRaw(requestParameters, initOverrides);
    }

    /**
     * Get the current user\'s information
     */
    async getUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SplitzUserDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SplitzUserDtoFromJSON(jsonValue));
    }

    /**
     * Get the current user\'s information
     */
    async getUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SplitzUserDto> {
        const response = await this.getUserInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Remove a friend from the current user
     */
    async removeFriendRaw(requestParameters: RemoveFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeFriend().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/friend/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a friend from the current user
     */
    async removeFriend(requestParameters: RemoveFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeFriendRaw(requestParameters, initOverrides);
    }

    /**
     * Update the remark of a friend
     */
    async updateFriendRemarkRaw(requestParameters: UpdateFriendRemarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFriendRemark().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['remark'] != null) {
            queryParameters['remark'] = requestParameters['remark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/friend/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the remark of a friend
     */
    async updateFriendRemark(requestParameters: UpdateFriendRemarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateFriendRemarkRaw(requestParameters, initOverrides);
    }

    /**
     * Update the current user\'s username and photo
     */
    async updateUserInfoRaw(requestParameters: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SplitzUserUpdateViewModelToJSON(requestParameters['splitzUserUpdateViewModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the current user\'s username and photo
     */
    async updateUserInfo(requestParameters: UpdateUserInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserInfoRaw(requestParameters, initOverrides);
    }

}
