/* tslint:disable */
/* eslint-disable */
/**
 * SplitzBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupDto,
  GroupInputDto,
  GroupReducedDto,
  ProblemDetails,
  TransactionDto,
} from '../models/index';
import {
    GroupDtoFromJSON,
    GroupDtoToJSON,
    GroupInputDtoFromJSON,
    GroupInputDtoToJSON,
    GroupReducedDtoFromJSON,
    GroupReducedDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TransactionDtoFromJSON,
    TransactionDtoToJSON,
} from '../models/index';

export interface AddGroupMemberRequest {
    groupId: string;
    requestBody?: Array<string>;
}

export interface CreateGroupRequest {
    groupInputDto?: GroupInputDto;
}

export interface CreateGroupJoinLinkRequest {
    groupId: string;
}

export interface GetGroupRequest {
    groupId: string;
}

export interface GetGroupInfoByLinkRequest {
    joinLinkId: string;
}

export interface GetGroupTransactionsRequest {
    groupId: string;
}

export interface JoinGroupByLinkRequest {
    joinLinkId: string;
}

export interface UpdateGroupRequest {
    groupId: string;
    groupInputDto?: GroupInputDto;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * Add members to a group
     */
    async addGroupMemberRaw(requestParameters: AddGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling addGroupMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group/{groupId}/members`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Add members to a group
     */
    async addGroupMember(requestParameters: AddGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.addGroupMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new group
     */
    async createGroupRaw(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupInputDtoToJSON(requestParameters['groupInputDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Create a new group
     */
    async createGroup(requestParameters: CreateGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a join link for a group
     */
    async createGroupJoinLinkRaw(requestParameters: CreateGroupJoinLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupReducedDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling createGroupJoinLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group/{groupId}/join-link`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupReducedDtoFromJSON(jsonValue));
    }

    /**
     * create a join link for a group
     */
    async createGroupJoinLink(requestParameters: CreateGroupJoinLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupReducedDto> {
        const response = await this.createGroupJoinLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the group info
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Get the group info
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get group info from join link
     */
    async getGroupInfoByLinkRaw(requestParameters: GetGroupInfoByLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupReducedDto>> {
        if (requestParameters['joinLinkId'] == null) {
            throw new runtime.RequiredError(
                'joinLinkId',
                'Required parameter "joinLinkId" was null or undefined when calling getGroupInfoByLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group/join/{joinLinkId}`.replace(`{${"joinLinkId"}}`, encodeURIComponent(String(requestParameters['joinLinkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupReducedDtoFromJSON(jsonValue));
    }

    /**
     * get group info from join link
     */
    async getGroupInfoByLink(requestParameters: GetGroupInfoByLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupReducedDto> {
        const response = await this.getGroupInfoByLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the group transactions
     */
    async getGroupTransactionsRaw(requestParameters: GetGroupTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDto>>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getGroupTransactions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group/{groupId}/transactions`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDtoFromJSON));
    }

    /**
     * Get the group transactions
     */
    async getGroupTransactions(requestParameters: GetGroupTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDto>> {
        const response = await this.getGroupTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current user\'s groups
     */
    async getGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupDtoFromJSON));
    }

    /**
     * Get the current user\'s groups
     */
    async getGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupDto>> {
        const response = await this.getGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * join a group by a join link
     */
    async joinGroupByLinkRaw(requestParameters: JoinGroupByLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['joinLinkId'] == null) {
            throw new runtime.RequiredError(
                'joinLinkId',
                'Required parameter "joinLinkId" was null or undefined when calling joinGroupByLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group/join/{joinLinkId}`.replace(`{${"joinLinkId"}}`, encodeURIComponent(String(requestParameters['joinLinkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * join a group by a join link
     */
    async joinGroupByLink(requestParameters: JoinGroupByLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.joinGroupByLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update group info
     */
    async updateGroupRaw(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling updateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupInputDtoToJSON(requestParameters['groupInputDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Update group info
     */
    async updateGroup(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.updateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
